/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package by.mmf.yellowpress.thrift.gen;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("userEmail", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_PASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userPass", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUBSCRIBED_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribedTags", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SUBSCRIBED_FACULTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribedFaculties", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public String userId; // required
  public String userEmail; // required
  public String userPass; // required
  public List<String> subscribedTags; // required
  public List<String> subscribedFaculties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_EMAIL((short)2, "userEmail"),
    USER_PASS((short)3, "userPass"),
    SUBSCRIBED_TAGS((short)4, "subscribedTags"),
    SUBSCRIBED_FACULTIES((short)5, "subscribedFaculties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_EMAIL
          return USER_EMAIL;
        case 3: // USER_PASS
          return USER_PASS;
        case 4: // SUBSCRIBED_TAGS
          return SUBSCRIBED_TAGS;
        case 5: // SUBSCRIBED_FACULTIES
          return SUBSCRIBED_FACULTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("userEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_PASS, new org.apache.thrift.meta_data.FieldMetaData("userPass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIBED_TAGS, new org.apache.thrift.meta_data.FieldMetaData("subscribedTags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SUBSCRIBED_FACULTIES, new org.apache.thrift.meta_data.FieldMetaData("subscribedFaculties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    String userId,
    String userEmail,
    String userPass,
    List<String> subscribedTags,
    List<String> subscribedFaculties)
  {
    this();
    this.userId = userId;
    this.userEmail = userEmail;
    this.userPass = userPass;
    this.subscribedTags = subscribedTags;
    this.subscribedFaculties = subscribedFaculties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetUserEmail()) {
      this.userEmail = other.userEmail;
    }
    if (other.isSetUserPass()) {
      this.userPass = other.userPass;
    }
    if (other.isSetSubscribedTags()) {
      List<String> __this__subscribedTags = new ArrayList<String>(other.subscribedTags);
      this.subscribedTags = __this__subscribedTags;
    }
    if (other.isSetSubscribedFaculties()) {
      List<String> __this__subscribedFaculties = new ArrayList<String>(other.subscribedFaculties);
      this.subscribedFaculties = __this__subscribedFaculties;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.userEmail = null;
    this.userPass = null;
    this.subscribedTags = null;
    this.subscribedFaculties = null;
  }

  public String getUserId() {
    return this.userId;
  }

  public User setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getUserEmail() {
    return this.userEmail;
  }

  public User setUserEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  public void unsetUserEmail() {
    this.userEmail = null;
  }

  /** Returns true if field userEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetUserEmail() {
    return this.userEmail != null;
  }

  public void setUserEmailIsSet(boolean value) {
    if (!value) {
      this.userEmail = null;
    }
  }

  public String getUserPass() {
    return this.userPass;
  }

  public User setUserPass(String userPass) {
    this.userPass = userPass;
    return this;
  }

  public void unsetUserPass() {
    this.userPass = null;
  }

  /** Returns true if field userPass is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPass() {
    return this.userPass != null;
  }

  public void setUserPassIsSet(boolean value) {
    if (!value) {
      this.userPass = null;
    }
  }

  public int getSubscribedTagsSize() {
    return (this.subscribedTags == null) ? 0 : this.subscribedTags.size();
  }

  public java.util.Iterator<String> getSubscribedTagsIterator() {
    return (this.subscribedTags == null) ? null : this.subscribedTags.iterator();
  }

  public void addToSubscribedTags(String elem) {
    if (this.subscribedTags == null) {
      this.subscribedTags = new ArrayList<String>();
    }
    this.subscribedTags.add(elem);
  }

  public List<String> getSubscribedTags() {
    return this.subscribedTags;
  }

  public User setSubscribedTags(List<String> subscribedTags) {
    this.subscribedTags = subscribedTags;
    return this;
  }

  public void unsetSubscribedTags() {
    this.subscribedTags = null;
  }

  /** Returns true if field subscribedTags is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscribedTags() {
    return this.subscribedTags != null;
  }

  public void setSubscribedTagsIsSet(boolean value) {
    if (!value) {
      this.subscribedTags = null;
    }
  }

  public int getSubscribedFacultiesSize() {
    return (this.subscribedFaculties == null) ? 0 : this.subscribedFaculties.size();
  }

  public java.util.Iterator<String> getSubscribedFacultiesIterator() {
    return (this.subscribedFaculties == null) ? null : this.subscribedFaculties.iterator();
  }

  public void addToSubscribedFaculties(String elem) {
    if (this.subscribedFaculties == null) {
      this.subscribedFaculties = new ArrayList<String>();
    }
    this.subscribedFaculties.add(elem);
  }

  public List<String> getSubscribedFaculties() {
    return this.subscribedFaculties;
  }

  public User setSubscribedFaculties(List<String> subscribedFaculties) {
    this.subscribedFaculties = subscribedFaculties;
    return this;
  }

  public void unsetSubscribedFaculties() {
    this.subscribedFaculties = null;
  }

  /** Returns true if field subscribedFaculties is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscribedFaculties() {
    return this.subscribedFaculties != null;
  }

  public void setSubscribedFacultiesIsSet(boolean value) {
    if (!value) {
      this.subscribedFaculties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case USER_EMAIL:
      if (value == null) {
        unsetUserEmail();
      } else {
        setUserEmail((String)value);
      }
      break;

    case USER_PASS:
      if (value == null) {
        unsetUserPass();
      } else {
        setUserPass((String)value);
      }
      break;

    case SUBSCRIBED_TAGS:
      if (value == null) {
        unsetSubscribedTags();
      } else {
        setSubscribedTags((List<String>)value);
      }
      break;

    case SUBSCRIBED_FACULTIES:
      if (value == null) {
        unsetSubscribedFaculties();
      } else {
        setSubscribedFaculties((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case USER_EMAIL:
      return getUserEmail();

    case USER_PASS:
      return getUserPass();

    case SUBSCRIBED_TAGS:
      return getSubscribedTags();

    case SUBSCRIBED_FACULTIES:
      return getSubscribedFaculties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_EMAIL:
      return isSetUserEmail();
    case USER_PASS:
      return isSetUserPass();
    case SUBSCRIBED_TAGS:
      return isSetSubscribedTags();
    case SUBSCRIBED_FACULTIES:
      return isSetSubscribedFaculties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_userEmail = true && this.isSetUserEmail();
    boolean that_present_userEmail = true && that.isSetUserEmail();
    if (this_present_userEmail || that_present_userEmail) {
      if (!(this_present_userEmail && that_present_userEmail))
        return false;
      if (!this.userEmail.equals(that.userEmail))
        return false;
    }

    boolean this_present_userPass = true && this.isSetUserPass();
    boolean that_present_userPass = true && that.isSetUserPass();
    if (this_present_userPass || that_present_userPass) {
      if (!(this_present_userPass && that_present_userPass))
        return false;
      if (!this.userPass.equals(that.userPass))
        return false;
    }

    boolean this_present_subscribedTags = true && this.isSetSubscribedTags();
    boolean that_present_subscribedTags = true && that.isSetSubscribedTags();
    if (this_present_subscribedTags || that_present_subscribedTags) {
      if (!(this_present_subscribedTags && that_present_subscribedTags))
        return false;
      if (!this.subscribedTags.equals(that.subscribedTags))
        return false;
    }

    boolean this_present_subscribedFaculties = true && this.isSetSubscribedFaculties();
    boolean that_present_subscribedFaculties = true && that.isSetSubscribedFaculties();
    if (this_present_subscribedFaculties || that_present_subscribedFaculties) {
      if (!(this_present_subscribedFaculties && that_present_subscribedFaculties))
        return false;
      if (!this.subscribedFaculties.equals(that.subscribedFaculties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_userId = true && (isSetUserId());
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);

    boolean present_userEmail = true && (isSetUserEmail());
    builder.append(present_userEmail);
    if (present_userEmail)
      builder.append(userEmail);

    boolean present_userPass = true && (isSetUserPass());
    builder.append(present_userPass);
    if (present_userPass)
      builder.append(userPass);

    boolean present_subscribedTags = true && (isSetSubscribedTags());
    builder.append(present_subscribedTags);
    if (present_subscribedTags)
      builder.append(subscribedTags);

    boolean present_subscribedFaculties = true && (isSetSubscribedFaculties());
    builder.append(present_subscribedFaculties);
    if (present_subscribedFaculties)
      builder.append(subscribedFaculties);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserEmail()).compareTo(other.isSetUserEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEmail, other.userEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPass()).compareTo(other.isSetUserPass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPass, other.userPass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscribedTags()).compareTo(other.isSetSubscribedTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribedTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribedTags, other.subscribedTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscribedFaculties()).compareTo(other.isSetSubscribedFaculties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribedFaculties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribedFaculties, other.subscribedFaculties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userEmail:");
    if (this.userEmail == null) {
      sb.append("null");
    } else {
      sb.append(this.userEmail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userPass:");
    if (this.userPass == null) {
      sb.append("null");
    } else {
      sb.append(this.userPass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subscribedTags:");
    if (this.subscribedTags == null) {
      sb.append("null");
    } else {
      sb.append(this.subscribedTags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subscribedFaculties:");
    if (this.subscribedFaculties == null) {
      sb.append("null");
    } else {
      sb.append(this.subscribedFaculties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userEmail = iprot.readString();
              struct.setUserEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_PASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userPass = iprot.readString();
              struct.setUserPassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBSCRIBED_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.subscribedTags = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10;
                  _elem10 = iprot.readString();
                  struct.subscribedTags.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setSubscribedTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUBSCRIBED_FACULTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.subscribedFaculties = new ArrayList<String>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  String _elem13;
                  _elem13 = iprot.readString();
                  struct.subscribedFaculties.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setSubscribedFacultiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.userEmail != null) {
        oprot.writeFieldBegin(USER_EMAIL_FIELD_DESC);
        oprot.writeString(struct.userEmail);
        oprot.writeFieldEnd();
      }
      if (struct.userPass != null) {
        oprot.writeFieldBegin(USER_PASS_FIELD_DESC);
        oprot.writeString(struct.userPass);
        oprot.writeFieldEnd();
      }
      if (struct.subscribedTags != null) {
        oprot.writeFieldBegin(SUBSCRIBED_TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.subscribedTags.size()));
          for (String _iter14 : struct.subscribedTags)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.subscribedFaculties != null) {
        oprot.writeFieldBegin(SUBSCRIBED_FACULTIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.subscribedFaculties.size()));
          for (String _iter15 : struct.subscribedFaculties)
          {
            oprot.writeString(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetUserEmail()) {
        optionals.set(1);
      }
      if (struct.isSetUserPass()) {
        optionals.set(2);
      }
      if (struct.isSetSubscribedTags()) {
        optionals.set(3);
      }
      if (struct.isSetSubscribedFaculties()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetUserEmail()) {
        oprot.writeString(struct.userEmail);
      }
      if (struct.isSetUserPass()) {
        oprot.writeString(struct.userPass);
      }
      if (struct.isSetSubscribedTags()) {
        {
          oprot.writeI32(struct.subscribedTags.size());
          for (String _iter16 : struct.subscribedTags)
          {
            oprot.writeString(_iter16);
          }
        }
      }
      if (struct.isSetSubscribedFaculties()) {
        {
          oprot.writeI32(struct.subscribedFaculties.size());
          for (String _iter17 : struct.subscribedFaculties)
          {
            oprot.writeString(_iter17);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userEmail = iprot.readString();
        struct.setUserEmailIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userPass = iprot.readString();
        struct.setUserPassIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.subscribedTags = new ArrayList<String>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            String _elem20;
            _elem20 = iprot.readString();
            struct.subscribedTags.add(_elem20);
          }
        }
        struct.setSubscribedTagsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.subscribedFaculties = new ArrayList<String>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            String _elem23;
            _elem23 = iprot.readString();
            struct.subscribedFaculties.add(_elem23);
          }
        }
        struct.setSubscribedFacultiesIsSet(true);
      }
    }
  }

}

