/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package by.mmf.yellowpress.thrift.gen;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class NewsItem implements org.apache.thrift.TBase<NewsItem, NewsItem._Fields>, java.io.Serializable, Cloneable, Comparable<NewsItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewsItem");

  private static final org.apache.thrift.protocol.TField NEWS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newsId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PUBLISHED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("publishedAt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_MODIFIED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifiedAt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FACULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("faculty", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NewsItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NewsItemTupleSchemeFactory());
  }

  public String newsId; // required
  public String publishedAt; // required
  public String lastModifiedAt; // required
  public String faculty; // required
  public String title; // required
  public String body; // required
  public String description; // required
  public String imageUrl; // required
  public List<String> tags; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NEWS_ID((short)1, "newsId"),
    PUBLISHED_AT((short)2, "publishedAt"),
    LAST_MODIFIED_AT((short)3, "lastModifiedAt"),
    FACULTY((short)4, "faculty"),
    TITLE((short)5, "title"),
    BODY((short)6, "body"),
    DESCRIPTION((short)7, "description"),
    IMAGE_URL((short)8, "imageUrl"),
    TAGS((short)9, "tags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEWS_ID
          return NEWS_ID;
        case 2: // PUBLISHED_AT
          return PUBLISHED_AT;
        case 3: // LAST_MODIFIED_AT
          return LAST_MODIFIED_AT;
        case 4: // FACULTY
          return FACULTY;
        case 5: // TITLE
          return TITLE;
        case 6: // BODY
          return BODY;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        case 8: // IMAGE_URL
          return IMAGE_URL;
        case 9: // TAGS
          return TAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEWS_ID, new org.apache.thrift.meta_data.FieldMetaData("newsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLISHED_AT, new org.apache.thrift.meta_data.FieldMetaData("publishedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_MODIFIED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastModifiedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACULTY, new org.apache.thrift.meta_data.FieldMetaData("faculty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewsItem.class, metaDataMap);
  }

  public NewsItem() {
  }

  public NewsItem(
    String newsId,
    String publishedAt,
    String lastModifiedAt,
    String faculty,
    String title,
    String body,
    String description,
    String imageUrl,
    List<String> tags)
  {
    this();
    this.newsId = newsId;
    this.publishedAt = publishedAt;
    this.lastModifiedAt = lastModifiedAt;
    this.faculty = faculty;
    this.title = title;
    this.body = body;
    this.description = description;
    this.imageUrl = imageUrl;
    this.tags = tags;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NewsItem(NewsItem other) {
    if (other.isSetNewsId()) {
      this.newsId = other.newsId;
    }
    if (other.isSetPublishedAt()) {
      this.publishedAt = other.publishedAt;
    }
    if (other.isSetLastModifiedAt()) {
      this.lastModifiedAt = other.lastModifiedAt;
    }
    if (other.isSetFaculty()) {
      this.faculty = other.faculty;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetBody()) {
      this.body = other.body;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    if (other.isSetTags()) {
      List<String> __this__tags = new ArrayList<String>(other.tags);
      this.tags = __this__tags;
    }
  }

  public NewsItem deepCopy() {
    return new NewsItem(this);
  }

  @Override
  public void clear() {
    this.newsId = null;
    this.publishedAt = null;
    this.lastModifiedAt = null;
    this.faculty = null;
    this.title = null;
    this.body = null;
    this.description = null;
    this.imageUrl = null;
    this.tags = null;
  }

  public String getNewsId() {
    return this.newsId;
  }

  public NewsItem setNewsId(String newsId) {
    this.newsId = newsId;
    return this;
  }

  public void unsetNewsId() {
    this.newsId = null;
  }

  /** Returns true if field newsId is set (has been assigned a value) and false otherwise */
  public boolean isSetNewsId() {
    return this.newsId != null;
  }

  public void setNewsIdIsSet(boolean value) {
    if (!value) {
      this.newsId = null;
    }
  }

  public String getPublishedAt() {
    return this.publishedAt;
  }

  public NewsItem setPublishedAt(String publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  public void unsetPublishedAt() {
    this.publishedAt = null;
  }

  /** Returns true if field publishedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishedAt() {
    return this.publishedAt != null;
  }

  public void setPublishedAtIsSet(boolean value) {
    if (!value) {
      this.publishedAt = null;
    }
  }

  public String getLastModifiedAt() {
    return this.lastModifiedAt;
  }

  public NewsItem setLastModifiedAt(String lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

  public void unsetLastModifiedAt() {
    this.lastModifiedAt = null;
  }

  /** Returns true if field lastModifiedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifiedAt() {
    return this.lastModifiedAt != null;
  }

  public void setLastModifiedAtIsSet(boolean value) {
    if (!value) {
      this.lastModifiedAt = null;
    }
  }

  public String getFaculty() {
    return this.faculty;
  }

  public NewsItem setFaculty(String faculty) {
    this.faculty = faculty;
    return this;
  }

  public void unsetFaculty() {
    this.faculty = null;
  }

  /** Returns true if field faculty is set (has been assigned a value) and false otherwise */
  public boolean isSetFaculty() {
    return this.faculty != null;
  }

  public void setFacultyIsSet(boolean value) {
    if (!value) {
      this.faculty = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public NewsItem setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getBody() {
    return this.body;
  }

  public NewsItem setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public NewsItem setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public NewsItem setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(elem);
  }

  public List<String> getTags() {
    return this.tags;
  }

  public NewsItem setTags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NEWS_ID:
      if (value == null) {
        unsetNewsId();
      } else {
        setNewsId((String)value);
      }
      break;

    case PUBLISHED_AT:
      if (value == null) {
        unsetPublishedAt();
      } else {
        setPublishedAt((String)value);
      }
      break;

    case LAST_MODIFIED_AT:
      if (value == null) {
        unsetLastModifiedAt();
      } else {
        setLastModifiedAt((String)value);
      }
      break;

    case FACULTY:
      if (value == null) {
        unsetFaculty();
      } else {
        setFaculty((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NEWS_ID:
      return getNewsId();

    case PUBLISHED_AT:
      return getPublishedAt();

    case LAST_MODIFIED_AT:
      return getLastModifiedAt();

    case FACULTY:
      return getFaculty();

    case TITLE:
      return getTitle();

    case BODY:
      return getBody();

    case DESCRIPTION:
      return getDescription();

    case IMAGE_URL:
      return getImageUrl();

    case TAGS:
      return getTags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NEWS_ID:
      return isSetNewsId();
    case PUBLISHED_AT:
      return isSetPublishedAt();
    case LAST_MODIFIED_AT:
      return isSetLastModifiedAt();
    case FACULTY:
      return isSetFaculty();
    case TITLE:
      return isSetTitle();
    case BODY:
      return isSetBody();
    case DESCRIPTION:
      return isSetDescription();
    case IMAGE_URL:
      return isSetImageUrl();
    case TAGS:
      return isSetTags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NewsItem)
      return this.equals((NewsItem)that);
    return false;
  }

  public boolean equals(NewsItem that) {
    if (that == null)
      return false;

    boolean this_present_newsId = true && this.isSetNewsId();
    boolean that_present_newsId = true && that.isSetNewsId();
    if (this_present_newsId || that_present_newsId) {
      if (!(this_present_newsId && that_present_newsId))
        return false;
      if (!this.newsId.equals(that.newsId))
        return false;
    }

    boolean this_present_publishedAt = true && this.isSetPublishedAt();
    boolean that_present_publishedAt = true && that.isSetPublishedAt();
    if (this_present_publishedAt || that_present_publishedAt) {
      if (!(this_present_publishedAt && that_present_publishedAt))
        return false;
      if (!this.publishedAt.equals(that.publishedAt))
        return false;
    }

    boolean this_present_lastModifiedAt = true && this.isSetLastModifiedAt();
    boolean that_present_lastModifiedAt = true && that.isSetLastModifiedAt();
    if (this_present_lastModifiedAt || that_present_lastModifiedAt) {
      if (!(this_present_lastModifiedAt && that_present_lastModifiedAt))
        return false;
      if (!this.lastModifiedAt.equals(that.lastModifiedAt))
        return false;
    }

    boolean this_present_faculty = true && this.isSetFaculty();
    boolean that_present_faculty = true && that.isSetFaculty();
    if (this_present_faculty || that_present_faculty) {
      if (!(this_present_faculty && that_present_faculty))
        return false;
      if (!this.faculty.equals(that.faculty))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_newsId = true && (isSetNewsId());
    builder.append(present_newsId);
    if (present_newsId)
      builder.append(newsId);

    boolean present_publishedAt = true && (isSetPublishedAt());
    builder.append(present_publishedAt);
    if (present_publishedAt)
      builder.append(publishedAt);

    boolean present_lastModifiedAt = true && (isSetLastModifiedAt());
    builder.append(present_lastModifiedAt);
    if (present_lastModifiedAt)
      builder.append(lastModifiedAt);

    boolean present_faculty = true && (isSetFaculty());
    builder.append(present_faculty);
    if (present_faculty)
      builder.append(faculty);

    boolean present_title = true && (isSetTitle());
    builder.append(present_title);
    if (present_title)
      builder.append(title);

    boolean present_body = true && (isSetBody());
    builder.append(present_body);
    if (present_body)
      builder.append(body);

    boolean present_description = true && (isSetDescription());
    builder.append(present_description);
    if (present_description)
      builder.append(description);

    boolean present_imageUrl = true && (isSetImageUrl());
    builder.append(present_imageUrl);
    if (present_imageUrl)
      builder.append(imageUrl);

    boolean present_tags = true && (isSetTags());
    builder.append(present_tags);
    if (present_tags)
      builder.append(tags);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(NewsItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNewsId()).compareTo(other.isSetNewsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsId, other.newsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishedAt()).compareTo(other.isSetPublishedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishedAt, other.publishedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifiedAt()).compareTo(other.isSetLastModifiedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifiedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifiedAt, other.lastModifiedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaculty()).compareTo(other.isSetFaculty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaculty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faculty, other.faculty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NewsItem(");
    boolean first = true;

    sb.append("newsId:");
    if (this.newsId == null) {
      sb.append("null");
    } else {
      sb.append(this.newsId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishedAt:");
    if (this.publishedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.publishedAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModifiedAt:");
    if (this.lastModifiedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.lastModifiedAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("faculty:");
    if (this.faculty == null) {
      sb.append("null");
    } else {
      sb.append(this.faculty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("body:");
    if (this.body == null) {
      sb.append("null");
    } else {
      sb.append(this.body);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageUrl:");
    if (this.imageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.imageUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NewsItemStandardSchemeFactory implements SchemeFactory {
    public NewsItemStandardScheme getScheme() {
      return new NewsItemStandardScheme();
    }
  }

  private static class NewsItemStandardScheme extends StandardScheme<NewsItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NewsItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NEWS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newsId = iprot.readString();
              struct.setNewsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PUBLISHED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publishedAt = iprot.readString();
              struct.setPublishedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_MODIFIED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastModifiedAt = iprot.readString();
              struct.setLastModifiedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FACULTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.faculty = iprot.readString();
              struct.setFacultyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tags = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.tags.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NewsItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.newsId != null) {
        oprot.writeFieldBegin(NEWS_ID_FIELD_DESC);
        oprot.writeString(struct.newsId);
        oprot.writeFieldEnd();
      }
      if (struct.publishedAt != null) {
        oprot.writeFieldBegin(PUBLISHED_AT_FIELD_DESC);
        oprot.writeString(struct.publishedAt);
        oprot.writeFieldEnd();
      }
      if (struct.lastModifiedAt != null) {
        oprot.writeFieldBegin(LAST_MODIFIED_AT_FIELD_DESC);
        oprot.writeString(struct.lastModifiedAt);
        oprot.writeFieldEnd();
      }
      if (struct.faculty != null) {
        oprot.writeFieldBegin(FACULTY_FIELD_DESC);
        oprot.writeString(struct.faculty);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.body);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.imageUrl != null) {
        oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
        oprot.writeString(struct.imageUrl);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
          for (String _iter3 : struct.tags)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NewsItemTupleSchemeFactory implements SchemeFactory {
    public NewsItemTupleScheme getScheme() {
      return new NewsItemTupleScheme();
    }
  }

  private static class NewsItemTupleScheme extends TupleScheme<NewsItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NewsItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNewsId()) {
        optionals.set(0);
      }
      if (struct.isSetPublishedAt()) {
        optionals.set(1);
      }
      if (struct.isSetLastModifiedAt()) {
        optionals.set(2);
      }
      if (struct.isSetFaculty()) {
        optionals.set(3);
      }
      if (struct.isSetTitle()) {
        optionals.set(4);
      }
      if (struct.isSetBody()) {
        optionals.set(5);
      }
      if (struct.isSetDescription()) {
        optionals.set(6);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(7);
      }
      if (struct.isSetTags()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetNewsId()) {
        oprot.writeString(struct.newsId);
      }
      if (struct.isSetPublishedAt()) {
        oprot.writeString(struct.publishedAt);
      }
      if (struct.isSetLastModifiedAt()) {
        oprot.writeString(struct.lastModifiedAt);
      }
      if (struct.isSetFaculty()) {
        oprot.writeString(struct.faculty);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetBody()) {
        oprot.writeString(struct.body);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter4 : struct.tags)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NewsItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.newsId = iprot.readString();
        struct.setNewsIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.publishedAt = iprot.readString();
        struct.setPublishedAtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastModifiedAt = iprot.readString();
        struct.setLastModifiedAtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.faculty = iprot.readString();
        struct.setFacultyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.tags.add(_elem7);
          }
        }
        struct.setTagsIsSet(true);
      }
    }
  }

}

