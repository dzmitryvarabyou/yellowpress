/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package by.mmf.yellowpress.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class UserT implements TBase<UserT, UserT._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("UserT");

  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.STRING, (short)1);
  private static final TField USER_EMAIL_FIELD_DESC = new TField("userEmail", TType.STRING, (short)2);
  private static final TField USER_PASS_FIELD_DESC = new TField("userPass", TType.STRING, (short)3);
  private static final TField SUBSCRIBED_TAGS_FIELD_DESC = new TField("subscribedTags", TType.LIST, (short)4);
  private static final TField SUBSCRIBED_FACULTIES_FIELD_DESC = new TField("subscribedFaculties", TType.LIST, (short)5);

  public String userId;
  public String userEmail;
  public String userPass;
  public List<String> subscribedTags;
  public List<String> subscribedFaculties;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_EMAIL((short)2, "userEmail"),
    USER_PASS((short)3, "userPass"),
    SUBSCRIBED_TAGS((short)4, "subscribedTags"),
    SUBSCRIBED_FACULTIES((short)5, "subscribedFaculties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_EMAIL
          return USER_EMAIL;
        case 3: // USER_PASS
          return USER_PASS;
        case 4: // SUBSCRIBED_TAGS
          return SUBSCRIBED_TAGS;
        case 5: // SUBSCRIBED_FACULTIES
          return SUBSCRIBED_FACULTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_EMAIL, new FieldMetaData("userEmail", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_PASS, new FieldMetaData("userPass", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIBED_TAGS, new FieldMetaData("subscribedTags", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.SUBSCRIBED_FACULTIES, new FieldMetaData("subscribedFaculties", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(UserT.class, metaDataMap);
  }

  public UserT() {
  }

  public UserT(
    String userId,
    String userEmail,
    String userPass,
    List<String> subscribedTags,
    List<String> subscribedFaculties)
  {
    this();
    this.userId = userId;
    this.userEmail = userEmail;
    this.userPass = userPass;
    this.subscribedTags = subscribedTags;
    this.subscribedFaculties = subscribedFaculties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserT(UserT other) {
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetUserEmail()) {
      this.userEmail = other.userEmail;
    }
    if (other.isSetUserPass()) {
      this.userPass = other.userPass;
    }
    if (other.isSetSubscribedTags()) {
      List<String> __this__subscribedTags = new ArrayList<String>();
      for (String other_element : other.subscribedTags) {
        __this__subscribedTags.add(other_element);
      }
      this.subscribedTags = __this__subscribedTags;
    }
    if (other.isSetSubscribedFaculties()) {
      List<String> __this__subscribedFaculties = new ArrayList<String>();
      for (String other_element : other.subscribedFaculties) {
        __this__subscribedFaculties.add(other_element);
      }
      this.subscribedFaculties = __this__subscribedFaculties;
    }
  }

  public UserT deepCopy() {
    return new UserT(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.userEmail = null;
    this.userPass = null;
    this.subscribedTags = null;
    this.subscribedFaculties = null;
  }

  public String getUserId() {
    return this.userId;
  }

  public UserT setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getUserEmail() {
    return this.userEmail;
  }

  public UserT setUserEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  public void unsetUserEmail() {
    this.userEmail = null;
  }

  /** Returns true if field userEmail is set (has been asigned a value) and false otherwise */
  public boolean isSetUserEmail() {
    return this.userEmail != null;
  }

  public void setUserEmailIsSet(boolean value) {
    if (!value) {
      this.userEmail = null;
    }
  }

  public String getUserPass() {
    return this.userPass;
  }

  public UserT setUserPass(String userPass) {
    this.userPass = userPass;
    return this;
  }

  public void unsetUserPass() {
    this.userPass = null;
  }

  /** Returns true if field userPass is set (has been asigned a value) and false otherwise */
  public boolean isSetUserPass() {
    return this.userPass != null;
  }

  public void setUserPassIsSet(boolean value) {
    if (!value) {
      this.userPass = null;
    }
  }

  public int getSubscribedTagsSize() {
    return (this.subscribedTags == null) ? 0 : this.subscribedTags.size();
  }

  public java.util.Iterator<String> getSubscribedTagsIterator() {
    return (this.subscribedTags == null) ? null : this.subscribedTags.iterator();
  }

  public void addToSubscribedTags(String elem) {
    if (this.subscribedTags == null) {
      this.subscribedTags = new ArrayList<String>();
    }
    this.subscribedTags.add(elem);
  }

  public List<String> getSubscribedTags() {
    return this.subscribedTags;
  }

  public UserT setSubscribedTags(List<String> subscribedTags) {
    this.subscribedTags = subscribedTags;
    return this;
  }

  public void unsetSubscribedTags() {
    this.subscribedTags = null;
  }

  /** Returns true if field subscribedTags is set (has been asigned a value) and false otherwise */
  public boolean isSetSubscribedTags() {
    return this.subscribedTags != null;
  }

  public void setSubscribedTagsIsSet(boolean value) {
    if (!value) {
      this.subscribedTags = null;
    }
  }

  public int getSubscribedFacultiesSize() {
    return (this.subscribedFaculties == null) ? 0 : this.subscribedFaculties.size();
  }

  public java.util.Iterator<String> getSubscribedFacultiesIterator() {
    return (this.subscribedFaculties == null) ? null : this.subscribedFaculties.iterator();
  }

  public void addToSubscribedFaculties(String elem) {
    if (this.subscribedFaculties == null) {
      this.subscribedFaculties = new ArrayList<String>();
    }
    this.subscribedFaculties.add(elem);
  }

  public List<String> getSubscribedFaculties() {
    return this.subscribedFaculties;
  }

  public UserT setSubscribedFaculties(List<String> subscribedFaculties) {
    this.subscribedFaculties = subscribedFaculties;
    return this;
  }

  public void unsetSubscribedFaculties() {
    this.subscribedFaculties = null;
  }

  /** Returns true if field subscribedFaculties is set (has been asigned a value) and false otherwise */
  public boolean isSetSubscribedFaculties() {
    return this.subscribedFaculties != null;
  }

  public void setSubscribedFacultiesIsSet(boolean value) {
    if (!value) {
      this.subscribedFaculties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case USER_EMAIL:
      if (value == null) {
        unsetUserEmail();
      } else {
        setUserEmail((String)value);
      }
      break;

    case USER_PASS:
      if (value == null) {
        unsetUserPass();
      } else {
        setUserPass((String)value);
      }
      break;

    case SUBSCRIBED_TAGS:
      if (value == null) {
        unsetSubscribedTags();
      } else {
        setSubscribedTags((List<String>)value);
      }
      break;

    case SUBSCRIBED_FACULTIES:
      if (value == null) {
        unsetSubscribedFaculties();
      } else {
        setSubscribedFaculties((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case USER_EMAIL:
      return getUserEmail();

    case USER_PASS:
      return getUserPass();

    case SUBSCRIBED_TAGS:
      return getSubscribedTags();

    case SUBSCRIBED_FACULTIES:
      return getSubscribedFaculties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_EMAIL:
      return isSetUserEmail();
    case USER_PASS:
      return isSetUserPass();
    case SUBSCRIBED_TAGS:
      return isSetSubscribedTags();
    case SUBSCRIBED_FACULTIES:
      return isSetSubscribedFaculties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserT)
      return this.equals((UserT)that);
    return false;
  }

  public boolean equals(UserT that) {
    if (that == null)
      return false;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_userEmail = true && this.isSetUserEmail();
    boolean that_present_userEmail = true && that.isSetUserEmail();
    if (this_present_userEmail || that_present_userEmail) {
      if (!(this_present_userEmail && that_present_userEmail))
        return false;
      if (!this.userEmail.equals(that.userEmail))
        return false;
    }

    boolean this_present_userPass = true && this.isSetUserPass();
    boolean that_present_userPass = true && that.isSetUserPass();
    if (this_present_userPass || that_present_userPass) {
      if (!(this_present_userPass && that_present_userPass))
        return false;
      if (!this.userPass.equals(that.userPass))
        return false;
    }

    boolean this_present_subscribedTags = true && this.isSetSubscribedTags();
    boolean that_present_subscribedTags = true && that.isSetSubscribedTags();
    if (this_present_subscribedTags || that_present_subscribedTags) {
      if (!(this_present_subscribedTags && that_present_subscribedTags))
        return false;
      if (!this.subscribedTags.equals(that.subscribedTags))
        return false;
    }

    boolean this_present_subscribedFaculties = true && this.isSetSubscribedFaculties();
    boolean that_present_subscribedFaculties = true && that.isSetSubscribedFaculties();
    if (this_present_subscribedFaculties || that_present_subscribedFaculties) {
      if (!(this_present_subscribedFaculties && that_present_subscribedFaculties))
        return false;
      if (!this.subscribedFaculties.equals(that.subscribedFaculties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserT other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserT typedOther = (UserT)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserEmail()).compareTo(typedOther.isSetUserEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserEmail()) {
      lastComparison = TBaseHelper.compareTo(this.userEmail, typedOther.userEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPass()).compareTo(typedOther.isSetUserPass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPass()) {
      lastComparison = TBaseHelper.compareTo(this.userPass, typedOther.userPass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscribedTags()).compareTo(typedOther.isSetSubscribedTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribedTags()) {
      lastComparison = TBaseHelper.compareTo(this.subscribedTags, typedOther.subscribedTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscribedFaculties()).compareTo(typedOther.isSetSubscribedFaculties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribedFaculties()) {
      lastComparison = TBaseHelper.compareTo(this.subscribedFaculties, typedOther.subscribedFaculties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // USER_ID
          if (field.type == TType.STRING) {
            this.userId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_EMAIL
          if (field.type == TType.STRING) {
            this.userEmail = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // USER_PASS
          if (field.type == TType.STRING) {
            this.userPass = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SUBSCRIBED_TAGS
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.subscribedTags = new ArrayList<String>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                String _elem6;
                _elem6 = iprot.readString();
                this.subscribedTags.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SUBSCRIBED_FACULTIES
          if (field.type == TType.LIST) {
            {
              TList _list7 = iprot.readListBegin();
              this.subscribedFaculties = new ArrayList<String>(_list7.size);
              for (int _i8 = 0; _i8 < _list7.size; ++_i8)
              {
                String _elem9;
                _elem9 = iprot.readString();
                this.subscribedFaculties.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userId != null) {
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    if (this.userEmail != null) {
      oprot.writeFieldBegin(USER_EMAIL_FIELD_DESC);
      oprot.writeString(this.userEmail);
      oprot.writeFieldEnd();
    }
    if (this.userPass != null) {
      oprot.writeFieldBegin(USER_PASS_FIELD_DESC);
      oprot.writeString(this.userPass);
      oprot.writeFieldEnd();
    }
    if (this.subscribedTags != null) {
      oprot.writeFieldBegin(SUBSCRIBED_TAGS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.subscribedTags.size()));
        for (String _iter10 : this.subscribedTags)
        {
          oprot.writeString(_iter10);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.subscribedFaculties != null) {
      oprot.writeFieldBegin(SUBSCRIBED_FACULTIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.subscribedFaculties.size()));
        for (String _iter11 : this.subscribedFaculties)
        {
          oprot.writeString(_iter11);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserT(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userEmail:");
    if (this.userEmail == null) {
      sb.append("null");
    } else {
      sb.append(this.userEmail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userPass:");
    if (this.userPass == null) {
      sb.append("null");
    } else {
      sb.append(this.userPass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subscribedTags:");
    if (this.subscribedTags == null) {
      sb.append("null");
    } else {
      sb.append(this.subscribedTags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subscribedFaculties:");
    if (this.subscribedFaculties == null) {
      sb.append("null");
    } else {
      sb.append(this.subscribedFaculties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

